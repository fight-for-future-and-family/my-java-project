package com.hoolai.panel.web.controller.manage;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.encoding.Md5PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hoolai.bi.notifyer.mail.MailSenderProxy;
import com.hoolai.bi.report.core.Constant;
import com.hoolai.bi.report.model.Types.CurrencyConvertedToRMBRate;
import com.hoolai.bi.report.model.entity.DailyReport;
import com.hoolai.bi.report.model.entity.Games;
import com.hoolai.bi.report.model.entity.UserLoginLog;
import com.hoolai.bi.report.service.DailyReportService;
import com.hoolai.bi.report.service.GamesService;
import com.hoolai.bi.report.service.SeriesAllService;
import com.hoolai.bi.report.service.UserLoginLogService;
import com.hoolai.bi.report.vo.GamesVO;
import com.hoolai.manage.model.Groups;
import com.hoolai.manage.model.Resources;
import com.hoolai.manage.model.SysConfig;
import com.hoolai.manage.model.Users;
import com.hoolai.manage.model.Users.UserStatus;
import com.hoolai.manage.service.GroupUsersService;
import com.hoolai.manage.service.GroupsService;
import com.hoolai.manage.service.ResourcesService;
import com.hoolai.manage.service.SysConfigService;
import com.hoolai.manage.service.UsersService;
import com.hoolai.manage.util.Types.SysConfigType;
import com.hoolai.manage.vo.SysConfigVO;
import com.hoolai.manage.vo.UsersVO;
import com.hoolai.panel.web.job.SeriesGamesJob;

@Controller
public class LoginController extends AbstractManageController{
	
	private static DecimalFormat df = new DecimalFormat("#,##0");
	private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	private static final long frozen_time = 24l * 60l * 60l * 1000l;
	private static int login_chance = 5;
	
	private Logger log = Logger.getLogger(LoginController.class);
	
	@Autowired
	private UsersService usersService;
	
	@Autowired
	private UserLoginLogService userLoginLogService;
	
	@Autowired
	private Md5PasswordEncoder md5PasswordEncoder;
	
	@Autowired
	private GamesService gamesService;
	
	@Autowired
	private GroupsService groupsService;
	
	@Autowired
	private GroupUsersService groupUsersService;
	
	@Autowired
	private ResourcesService resourcesService;
	
	@Autowired
	private DailyReportService dailyReportService;
	
	@Autowired
	private SysConfigService sysConfigService;
	
	@Autowired
	private SeriesGamesJob seriesGamesJob;
	
	@Autowired
	private SeriesAllService seriesAllService;
	
	@RequestMapping(value = {"/indexLogin.ac"}, method = { RequestMethod.GET,RequestMethod.POST })
	public String index(HttpServletRequest request,HttpSession session,@ModelAttribute("usersVO") UsersVO usersVO,BindingResult result,Model model)throws Exception {
		return "index.jsp";
	}
	
	@RequestMapping(value = {"/toMain.ac"}, method = { RequestMethod.GET,RequestMethod.POST })
	public String toMain(HttpServletRequest request,HttpSession session,
			@ModelAttribute("usersVO") UsersVO usersVO,@ModelAttribute("gamesVO") GamesVO gamesVO,
			BindingResult result,Model model)throws Exception {
		String type = request.getParameter("type");
		this.removeSession(request, "game");
		
		if(isOutSideUser(request)){
			return "index/main_outside.jsp";
		}else if(isWanDa(request)){
			return "index/wanda.jsp";
		}else if(!StringUtils.isEmpty(type) && "1".equals(type)){
			return "wap/view/gamesView.jsp";
		}else{
			return "index/main.jsp";
		}
	}
	
	@RequestMapping(value = {"/login.ac"}, method = {RequestMethod.POST })
	public String login(HttpServletRequest request,HttpSession session,
			@ModelAttribute("usersVO") UsersVO usersVO,@ModelAttribute("gamesVO") GamesVO gamesVO,
			BindingResult result,Model model)throws Exception {
		try {
			
			Users users = this.usersService.getUserByLoginName(usersVO);
			if(users==null){
				model.addAttribute("msg", "用户名和密码不匹配！");
				return "index.jsp";
			}
			if(users.getId() == 361){
				log.error("checkIp: RemoteAddr="+request.getRemoteAddr()+", RemoteHost="+request.getRemoteHost()
						+",RemotePort="+request.getRemotePort());
			}
			// 测试是否被攻击用的
			if(users.getId() == 361){
				log.error("checkIp: RemoteAddr="+request.getRemoteAddr()+", RemoteHost="+request.getRemoteHost()
						+",RemotePort="+request.getRemotePort());
			}
			
			// 第二天清空用户输错次数
			otherDayClearUsersLoginErrorTimes(users);
			
			// 判断验证码
			String code = super.getVerificationCode(request);
			if(users.getLoginErrorTimes()>=2){
				if(usersVO.getVeriCode() == null || code == null){
					model.addAttribute("loginErrorTimes", users.getLoginErrorTimes());
					model.addAttribute("msg", "您之前密码已输错"+users.getLoginErrorTimes()+"次，现需输入验证码才能登录。如不是本人操作，请联系管理员。");
					return "index.jsp";
				}else if(!code.equals(usersVO.getVeriCode())){
					model.addAttribute("msg", "验证码输入不正确");
					model.addAttribute("loginErrorTimes", users.getLoginErrorTimes());
					return "index.jsp";
				}
			}
			
			// 判断用户状态
			if(users.getStatus() == UserStatus.ADMIN_FROZEN.ordinal()){
				model.addAttribute("msg", "您的账号已冻结!请联系管理员解冻！");
				return "index.jsp";
			}else if(users.getStatus() == UserStatus.FROZEN.ordinal()){
				Date date = getLastLoginDay(users);
				Date now = new Date();
				long time = now.getTime() - date.getTime();
				if(time > 0 && time < frozen_time){
					model.addAttribute("msg", "您的账号已冻结!大约"+(Math.round((frozen_time-time)/1000d/60d/60d))+"小时后解冻。");
					return "index.jsp";
				}else{
					users.setStatus(UserStatus.NORMAL.ordinal());
				}
			}
			
			// 验证密码
			String pass=usersVO.getEntity().getPassword();
			String md5Pass=this.md5PasswordEncoder.encodePassword(pass, null);
			if(!users.getPassword().equals(md5Pass)){
				users.setLastLoginTime(DateFormatUtils.format(new Date(), Users.pattern));
				users.setLoginErrorTimes(users.getLoginErrorTimes()+1);
				int sy = login_chance-users.getLoginErrorTimes();
				if(sy > 0){
					model.addAttribute("msg", "登陆名与密码不匹配！您还有"+sy+"次机会，自动锁定之前可通过忘记密码找回。");
					model.addAttribute("loginErrorTimes", users.getLoginErrorTimes());
				}else if(sy >= 2){
					//shengcheng 一定要预生成验证码，不然绕过jsp访问，跟没设一样
				}else{
					users.setStatus(UserStatus.FROZEN.ordinal());
					model.addAttribute("msg", "您已用掉5次机会，账户被冻结24小时！可以联系管理员解冻！");
					log.info("账户冻结:用户名："+users.getLoginName()+",请求时间："+sdf.format(new Date())+",请求IP:"+request.getRemoteAddr());
				}
				usersService.modifyEntitySelective(users);
				return "index.jsp";
			}else{
				users.setLoginErrorTimes(0);
				super.removeVerificationCode(request);
			}
			
			String lastLogin = users.getLastLoginTime();
			users.setLastLoginTime(DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));// 保存本次的登录时间
			usersService.modifyEntitySelective(users);
			users.setLastLoginTime(lastLogin);// 页面显示上一次登录的时间
			
			boolean isHaveGames = this.processGameSession(request, users.getId());
			if(!isHaveGames){
				model.addAttribute("msg", "你暂时没有运营的游戏，请向相关人员申请权限！");
				return "index.jsp";
			}
			
			List<Resources> resources = resourcesService.getResourcesByUserId(users.getId());
			List<Groups> groups = groupsService.getGroupsByUserId(users.getId());
			
			//oldReportCompatible(users, groups);
			
			super.setSessionUsers(request, users);
			super.setSession(request, "resources", resources);
			super.setSession(request, "groups", groups);
			
			boolean isAdmin = super.isAdmin(request);
			boolean isOutSideUser = super.isOutSideUser(request);
			boolean isWanDa = super.isWanDa(request);
			boolean isProduct = super.isProduct(request);
			super.setSession(request, "isAdmin", isAdmin);
			super.setSession(request, "isOutSideUser", isOutSideUser);
			super.setSession(request, "isWanDa", isWanDa);
			super.setSession(request, "isProduct", isProduct);
			super.setSession(request, "isPM", super.isPM(request));
			super.setSession(request, "isLeader", super.isLeader(request));
			
			if(Constant.IS_MAINTAIN && !isAdmin){
				return "index.jsp";
			}
			
			UserLoginLog userLoginLog = new UserLoginLog();
			userLoginLog.setLoginName(users.getLoginName());
			userLoginLog.setUserBiId(users.getUserBiId());
			userLoginLog.setRealName(users.getRealName());
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:dd");
			userLoginLog.setLoginTime(sdf.format(new Date()));
			userLoginLogService.saveLoginLogs(userLoginLog);
			
   			if(isOutSideUser){
   				  return super.redirect("/panel_manage/toMain.ac?type=2");
   			}else if(usersVO.getLoginType().equals("no_chart")){
	   			return super.redirect("/panel_manage/toMain.ac?type=1");
	   		}else{
	   			return super.redirect("/panel_manage/toMain.ac");
	   		}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}

	private Date getLastLoginDay(Users users) {
		Date date;
		try{
		    date = DateUtils.parseDate(users.getLastLoginTime(), Users.pattern);
		}catch (Exception e) {
			try{
			 date = DateUtils.parseDate(users.getLastLoginTime(), "yyyy-MM-dd");
			}catch (Exception ee) {
				date = new Date();
			}
		}
		return date;
	}

	private void otherDayClearUsersLoginErrorTimes(Users users) {
		Date date = getLastLoginDay(users);
		Calendar calendarLast = Calendar.getInstance();
		calendarLast.setTimeInMillis(date.getTime());
		int lastYear = calendarLast.get(Calendar.YEAR);
		int lastLoginDay = calendarLast.get(Calendar.DAY_OF_YEAR);
		
		Calendar calendarNow = Calendar.getInstance();
		int nowYear = calendarNow.get(Calendar.YEAR);
		int nowDay = calendarNow.get(Calendar.DAY_OF_YEAR);
		if(nowYear > lastYear
		|| (nowYear == lastYear && nowDay > lastLoginDay)){
			users.setLoginErrorTimes(0);
		}
	}
	
	@RequestMapping(value = {"/getGames.ac"}, method = { RequestMethod.GET,RequestMethod.POST })
	@ResponseBody
	public Map<String,Object> getGames(HttpServletRequest request,HttpServletResponse response,HttpSession session)throws Exception{
		Map<String,Object> ret = new HashMap<String, Object>();
		String parentId = request.getParameter("parentId");
		if(StringUtils.isEmpty(parentId)){
			return ret;
		}
		List<GamesVO> gameVOs = (List<GamesVO>) this.getSession(request, "gameVOs");
		List<GamesVO> chGames = new ArrayList<GamesVO>();
		for(GamesVO gameVo:gameVOs){
			if(gameVo.getEntity().getParentId() == Long.valueOf(parentId)){
				chGames.add(gameVo);
			}
		}
		
		/**
		 * 获取游戏总览的3天和7天收入
		 * start
		 */
		/*
		//获取系统前一天
		Calendar   c   =   Calendar.getInstance();   
		c.add(Calendar.DAY_OF_MONTH, -1);  
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
		String endDate=formatter.format(c.getTime());  
		String beginDate = "";
		
		String seriesid = chGames.get(0).getEntity().getParentId().toString();
		String seriesName = chGames.get(0).getEntity().getName();
		String Three_days = "3";
		String Seven_days = "7";
		String beginDate_Three = seriesGamesJob.getBeginDate(endDate, Three_days);
		String beginDate_Seven = seriesGamesJob.getBeginDate(endDate, Seven_days);
		
		SeriesAll seriesAll = new SeriesAll();
		seriesAll.setBeginDate(beginDate_Three);
		seriesAll.setEndDate(endDate);
		seriesAll.setSeriesid(seriesid);
		seriesAll.setDataType(Three_days);
		//3天收入
		List<SeriesAll> Three_daysList = seriesAllService.selectSeriesAll(seriesAll);
		//7天收入
		seriesAll.setBeginDate(beginDate_Seven);
		seriesAll.setDataType(Seven_days);
		List<SeriesAll> Seven_daysList = seriesAllService.selectSeriesAll(seriesAll);
		
		
		if(Three_daysList.size()==0||Seven_daysList.size()==0) {
			List<Games> gameList = (List<Games>) super.getSession(request, "games");
			if("".equals(Three_days)||"".equals(Seven_days)){
				seriesGamesJob.runSeriesGamesData(beginDate, endDate, seriesName, seriesid, Three_days, gameList);
				seriesGamesJob.runSeriesGamesData(beginDate, endDate, seriesName, seriesid, Seven_days, gameList);
			}else{
				seriesGamesJob.runSeriesGamesData("", endDate, seriesName, seriesid, "3", gameList);
				seriesGamesJob.runSeriesGamesData("", endDate, seriesName, seriesid, "7", gameList);
			}
			Three_daysList = seriesAllService.selectSeriesAll(seriesAll);
			Seven_daysList = seriesAllService.selectSeriesAll(seriesAll);
		}*/
		/**
		 * end
		 */
		ret.put("chGames", chGames);
		//ret.put("reportThree", Three_daysList);
		//ret.put("reportSeven", Seven_daysList);
		return ret;
	}

	
	/**
	 * 游戏相关信息，存放在内存中
	 * @param request
	 * @param userId
	 */
	private boolean processGameSession(HttpServletRequest request,Long userId){
		List<Games> games = gamesService.selectGamesByUserId(userId);
		if(games.size()>0){
			List<DailyReport> dailyReports = dailyReportService.selectDailyReport4Auth(games);
			
			Map<Long,Games> gamesMap=new HashMap<Long, Games>();
			Map<String,Games> biGamesMap=new HashMap<String, Games>();
			List<GamesVO> gameVOs = new ArrayList<GamesVO>();
			for (Games game : games) {
				gamesMap.put(game.getId(), game);
				biGamesMap.put(game.getSnid()+"_"+game.getGameid(), game);
				
				GamesVO gamesVO = new GamesVO(game);
				gamesVO.setYesterdayPayAmount(findYesterdayPayAmount(game.getSnid(), game.getGameid(), dailyReports));
				gameVOs.add(gamesVO);
			}
			List<SysConfigVO> gameTypes = processGameTypes(userId, gameVOs);
			
			
			super.setSession(request, "gameTypes", gameTypes);
			super.setSession(request, "games", games);
			super.setSession(request, "gameVOs", gameVOs);
			super.setSession(request, "gamesMap", gamesMap);
			super.setSession(request, "biGamesMap", biGamesMap);
			
			return true;
		}else{
			return false;
		}
	}
	
	private List<SysConfigVO> processGameTypes(Long userId,List<GamesVO> gameVOs){
		SysConfigVO sysConfigVO = new SysConfigVO();
		sysConfigVO.setUserId(userId);
		sysConfigVO.getEntity().setConfigType(SysConfigType.PART_OF_GAME.value());
		List<SysConfig> gameTypes = sysConfigService.selectGamesTypeByUserId(sysConfigVO);
		
		String currency_unified = "元";
		List<SysConfigVO> sysConfigVOs = new ArrayList<SysConfigVO>();
		for(SysConfig sysConfig:gameTypes){
			SysConfigVO sysConfigVOTemp = new SysConfigVO(sysConfig);
			
			double ytdAmount = 0d;
			double monthAmount = 0d;
			long installCount = 0l;
			boolean ytdStatus = false;
			
			for(GamesVO gameVO:gameVOs){
				if(gameVO.getEntity().getParentId() != null && gameVO.getEntity().getParentId().intValue() == sysConfig.getId()){
					String currency = gameVO.getEntity().getCurrency();
					Double toRMBRate = CurrencyConvertedToRMBRate.convert(currency).getValue();
					
					Double rate = gameVO.getEntity().getRate();
					Double m = 0d;
					Date date = new Date();
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					if(gameVO.getEntity().getEtlTriggerTime()!=null){
						if(sdf.format(date).substring(5, 7).equals(sdf.format(gameVO.getEntity().getEtlTriggerTime()).substring(5, 7))){
							if("02".equals(sdf.format(date).substring(8, 10))){
								if(gameVO.getYesterdayPayAmount()==-1d){
									gameVO.getEntity().setPayAmount(0d);
								}
							}
							m = gameVO.getEntity().getPayAmount() == null ? 0d : gameVO.getEntity().getPayAmount();
						}else{
							gameVO.getEntity().setPayAmount(0d);
						}
					}else{
						gameVO.getEntity().setPayAmount(0d);
					}
					Long install = gameVO.getEntity().getInstall();
					
					if(new Double(gameVO.getYesterdayPayAmount())!=-1){
						ytdStatus = true;
						ytdAmount += (gameVO.getYesterdayPayAmount() / rate) * toRMBRate;
					}else{
						ytdAmount += 0;
					}
					monthAmount += m == null ? 0d : (m / rate) * toRMBRate;
					installCount += install == null ? 0 : install.longValue();
				}
			}
			
			if(ytdStatus){
				sysConfigVOTemp.setYtdAmount(df.format(Math.round(ytdAmount))+currency_unified);
			}
			else{
				sysConfigVOTemp.setYtdAmount("计算中");
			}
				
			sysConfigVOTemp.setMonthAmount(df.format(Math.round(monthAmount))+currency_unified);
			
			sysConfigVOTemp.setYtdAmountd(ytdAmount);
			sysConfigVOTemp.setMonthAmountd(monthAmount);
			sysConfigVOTemp.setInstallCount(installCount);
			
			sysConfigVOs.add(sysConfigVOTemp);
		}
		
		return sort(sysConfigVOs);
	}
	
	/**
	 * 倒序排列
	 * @param sysConfigVOs
	 * @return
	 */
private List<SysConfigVO> sort(List<SysConfigVO> sysConfigVOs) {
		
		Collections.sort(sysConfigVOs, new Comparator<SysConfigVO>() {

			@Override
			public int compare(SysConfigVO o1, SysConfigVO o2) {
				if(o1.getEntity().getName().contains("已下线")){
					return 1;
				}
				if(o1.getMonthAmountd() > o2.getMonthAmountd()){
					return -1;
				}else if(o1.getMonthAmountd().doubleValue() == o2.getMonthAmountd().doubleValue()){
					if(o1.getInstallCount() >= o2.getInstallCount()){
						return -1;
					}else{
						return 1;
					}
				}else {
					return 1;
				}
			}
		});
		return sysConfigVOs;
	}

	private double findYesterdayPayAmount(String snid,String gameid,List<DailyReport> dailyReports){
		if("11".equals(snid)&&"91".equals(gameid)){
			System.out.println();
		}
		for(DailyReport report:dailyReports){
			if(report.getSnid().equals(snid) && gameid.equals(report.getGameid())){
				return report.getPaymentAmount();
			}
		}
		return -1d;
	}
	
	@RequestMapping(value = {"/logout.ac"}, method = { RequestMethod.GET,RequestMethod.POST })
	public String logout(HttpServletRequest request,HttpSession session,Model model)throws Exception {
		
		super.removeSessionUsers(request);
		
		return "index.jsp";
	}
	
	@RequestMapping(value = {"/toInstructions.ac"}, method = { RequestMethod.GET,RequestMethod.POST })
	public String instructions(HttpServletRequest request,HttpSession session,@ModelAttribute("usersVO") UsersVO usersVO,BindingResult result,Model model)throws Exception {
		return "manage/user/instructions.jsp";
	}
	
	@RequestMapping(value = {"/findPass.ac"}, method = { RequestMethod.GET,RequestMethod.POST })
	public String findPass(HttpServletRequest request,HttpSession session,@ModelAttribute("usersVO") UsersVO usersVO,BindingResult result,Model model)throws Exception {
		
		if(usersVO == null || usersVO.getEntity() == null
				|| StringUtils.isEmpty(usersVO.getEntity().getLoginName())){
			codeGenerate(request);//预生成
			return "manage/user/findPass.jsp";
		}
		
		String code = super.getVerificationCode(request);
		if(code == null){
			codeGenerate(request);//预生成
			return "manage/user/findPass.jsp";
		}else{
			if(!code.equals(usersVO.getVeriCode())){
				model.addAttribute("mess", "验证码输入不正确");
				return "manage/user/findPass.jsp";
			}
			
			Users user = usersService.getUserByLoginName(usersVO);
			if(user == null){
				model.addAttribute("mess","用户不存在！");
			}else if(!user.getEmail().endsWith(usersVO.getEntity().getEmail())){
				model.addAttribute("mess", "用户名与邮箱不匹配！");// 提供的邮箱错误
			}else{
				String pass = Users.randomPass();
				user.setPassword(md5PasswordEncoder.encodePassword(pass, null));
				usersService.modifyEntitySelective(user);
				
				// 发送邮件
				MailSenderProxy proxy = new MailSenderProxy();
				proxy.sendMail(user.getEmail(), "胡莱游戏报表系统找回密码", "新密码为："+pass+",请登录系统更改密码并妥善保管密码！");
				model.addAttribute("mess","密码已发送至邮箱"+user.getEmail()+",登录系统后请及时更改密码！");
				super.removeVerificationCode(request);
			}
		}
		return "manage/user/findPass.jsp";
	}
	
	private void codeGenerate(HttpServletRequest request){
		Random random = new Random();
		String sRand = "";
		for (int i = 0; i < 4; i++) {
			String rand = String.valueOf(random.nextInt(10));
			sRand += rand;
		}
		HttpSession session=request.getSession();
		session.setAttribute("sessRandomCode", sRand);
	}
}

